import { appConfigImportRegex, generateModuleText, packageNameRegex } from '@app-config/utils';
import { loadValidatedConfig } from '@app-config/config';
import { loadSchema } from '@app-config/schema';
export default function appConfigRollup(options = {}) {
    const currentFilePaths = [];
    return {
        name: '@app-config/rollup',
        currentFilePaths,
        resolveId(id) {
            if (shouldTransform(id)) {
                return { id, moduleSideEffects: false, external: false };
            }
        },
        async load(id) {
            if (shouldTransform(id)) {
                return loadConfig(options, currentFilePaths);
            }
        },
        async transform(_, id) {
            if (shouldTransform(id)) {
                return loadConfig(options, currentFilePaths);
            }
        },
    };
}
function shouldTransform(id) {
    return !!packageNameRegex.exec(id) || !!appConfigImportRegex.exec(id);
}
async function loadConfig({ loadingOptions, schemaLoadingOptions, injectValidationFunction = true, noBundledConfig, useGlobalNamespace, readGlobal, }, currentFilePaths) {
    var _a;
    if (noBundledConfig) {
        const { validationFunctionCode } = await loadSchema(schemaLoadingOptions);
        return generateModuleText(undefined, {
            environment: undefined,
            useGlobalNamespace: true,
            validationFunctionCode: injectValidationFunction ? validationFunctionCode : undefined,
            esmValidationCode: true,
        });
    }
    const { fullConfig, environment, validationFunctionCode, filePaths } = await loadValidatedConfig(loadingOptions, schemaLoadingOptions);
    if (filePaths) {
        currentFilePaths.splice(0);
        currentFilePaths.push(...filePaths);
    }
    const code = generateModuleText(fullConfig, {
        environment,
        useGlobalNamespace: (_a = useGlobalNamespace !== null && useGlobalNamespace !== void 0 ? useGlobalNamespace : readGlobal) !== null && _a !== void 0 ? _a : true,
        validationFunctionCode: injectValidationFunction ? validationFunctionCode : undefined,
        esmValidationCode: true,
    });
    return {
        code,
        moduleSideEffects: false,
    };
}
//# sourceMappingURL=index.js.map
/* eslint-disable no-console */
export var LogLevel;
(function (LogLevel) {
    LogLevel["Verbose"] = "verbose";
    LogLevel["Info"] = "info";
    LogLevel["Warn"] = "warn";
    LogLevel["Error"] = "error";
    LogLevel["None"] = "none";
})(LogLevel || (LogLevel = {}));
let logLevel = typeof test !== 'undefined' ? LogLevel.Error : LogLevel.Warn;
export const logger = {
    setLevel(level) {
        logLevel = level;
    },
    verbose(message) {
        if (logLevel === LogLevel.Verbose) {
            console.log(`[ws-rpc][VERBOSE] ${message}`);
        }
    },
    info(message) {
        if (logLevel === LogLevel.Info || logLevel === LogLevel.Verbose) {
            console.log(`[ws-rpc][INFO] ${message}`);
        }
    },
    warn(message) {
        if (logLevel === LogLevel.Warn || logLevel === LogLevel.Info || logLevel === LogLevel.Verbose) {
            console.warn(`[ws-rpc][WARN] ${message}`);
        }
    },
    error(message) {
        if (logLevel === LogLevel.Error ||
            logLevel === LogLevel.Warn ||
            logLevel === LogLevel.Info ||
            logLevel === LogLevel.Verbose) {
            console.error(`[ws-rpc][ERROR] ${message}`);
        }
    },
};
export const setLogLevel = (level) => logger.setLevel(level);
//# sourceMappingURL=logging.js.map